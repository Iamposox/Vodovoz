using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Gamma.Widgets;
using QS.Dialog.GtkUI;
using QS.DomainModel.UoW;
using QS.Project.Journal.EntitySelector;
using QS.Report;
using QSReport;
using Vodovoz.CommonEnums;
using Vodovoz.Domain.Logistic;

namespace Vodovoz.ReportsParameters.Logistic
{
    public partial class CarsExploitationReport : SingleUoWWidgetBase, IParametersWidget
    {
        public CarsExploitationReport(IUnitOfWorkFactory unitOfWorkFactory, IEntityAutocompleteSelectorFactory carAutocompleteSelectorFactory)
        {
            if(unitOfWorkFactory == null) {
                throw new ArgumentNullException(nameof(unitOfWorkFactory));
            }
            this.carAutocompleteSelectorFactory = carAutocompleteSelectorFactory ??
                throw new ArgumentNullException(nameof(carAutocompleteSelectorFactory));
            
            UoW = unitOfWorkFactory.CreateWithoutRoot();

            this.Build();
            Configure();
        }
        
        private readonly IEntityAutocompleteSelectorFactory carAutocompleteSelectorFactory;

        private void Configure()
        {
            comboMonth.ItemsEnum = typeof(Month);
            comboMonth.SelectedItem = (Month)DateTime.Today.Month;
            
            int i = 0;
            comboYear.ItemsList = Enumerable.Repeat(DateTime.Today.Year, 10).Select(x => x - i++);
            comboYear.SelectedItem = DateTime.Today.Year;
            
            comboIndicatorsType.DefaultFirst = true;
            comboIndicatorsType.ItemsEnum = typeof(IndicatorsType);

            enumComboOwnType.DefaultFirst = true;
            enumComboOwnType.ItemsEnum = typeof(CarOwnType);
            enumComboOwnType.Changed += (sender, args) => OnComboOwnTypeChanged();

            comboCompanyCarType.ItemsEnum = typeof(CompanyCarType);
            comboCompanyCarType.Changed += (sender, args) => UpdateAvailableIndicators();
            
            comboDriverCarType.ItemsList = UoW.GetAll<DriverCarKind>();

            entryCar.SetEntityAutocompleteSelectorFactory(carAutocompleteSelectorFactory);
            entryCar.Changed += (sender, args) => OnEntryCarChanged();

            buttonCreateReport.Clicked += (sender, args) => LoadReport?.Invoke(this, new LoadReportEventArgs(GetReportInfo()));

            enumchecklistIndicators.RememberStateOnHide = true;
            enumchecklistIndicators.EnumType = typeof(Indicator);
            OnComboOwnTypeChanged();
        }

        private void OnComboOwnTypeChanged()
        {
            var carOwnType = enumComboOwnType.SelectedItem as CarOwnType?;
            switch(carOwnType) {
                case CarOwnType.Company:
                    ylabelCompanyCarType.Visible = true;
                    comboCompanyCarType.Visible = true;

                    ylabelDriverCarType.Visible = false;
                    comboDriverCarType.Visible = false;
                    comboDriverCarType.SelectedItem = SpecialComboState.All;
                    break;
                case CarOwnType.Driver:
                    ylabelDriverCarType.Visible = true;
                    comboDriverCarType.Visible = true;

                    ylabelCompanyCarType.Visible = false;
                    comboCompanyCarType.Visible = false;
                    comboCompanyCarType.SelectedItem = SpecialComboState.All;
                    break;
            }

            UpdateAvailableIndicators();
        }

        private void OnEntryCarChanged()
        {
            if(entryCar.Subject is Car car) {
                comboCompanyCarType.Sensitive = false;
                comboDriverCarType.Sensitive = false;
                enumComboOwnType.Sensitive = false;
                enumComboOwnType.SelectedItem = car.IsCompanyCar ? CarOwnType.Company : CarOwnType.Driver;
                
                if(enumComboOwnType.SelectedItem is CarOwnType.Company) {
                    comboCompanyCarType.SelectedItem = GetCompanyCarType(car);
                }
                else {
                    comboDriverCarType.SelectedItem = car.DriverCarKind ?? (object)SpecialComboState.All;
                }
            }
            else {
                enumComboOwnType.Sensitive = true;
                comboDriverCarType.Sensitive = true;
            }
            OnComboOwnTypeChanged();
        }

        private void UpdateAvailableIndicators()
        {
            enumchecklistIndicators.ClearEnumHideList();

            switch(enumComboOwnType.SelectedItem as CarOwnType?) {
                
                case CarOwnType.Company:

                    switch(comboCompanyCarType.SelectedItem as CompanyCarType?) {
                        case CompanyCarType.Largus:
                            enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.Forwarders});
                            break;
                        case CompanyCarType.LargusRaskat:
                            enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.MileageFact, Indicator.MileagePlan, Indicator.FuelOverspending});
                            break;
                        case CompanyCarType.GazelleRaskat:
                            enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.MileageFact, Indicator.MileagePlan, Indicator.FuelOverspending});
                            break;
                    }
                    break;
                
                case CarOwnType.Driver:
                    enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.MileageFact, Indicator.MileagePlan, Indicator.FuelOverspending});
                    break;
            }
        }

        public string Title => "Аналитика эксплуатации ТС";

        public event EventHandler<LoadReportEventArgs> LoadReport;

        private ReportInfo GetReportInfo ()
        {
            var selectedYear = (int)comboYear.SelectedItem;
            var selectedMonth = (int)comboMonth.SelectedItem;

            var carOwnType = "";
            if(enumComboOwnType.SelectedItemOrNull is CarOwnType ownType) {
                carOwnType = ownType.ToString();
            }
            
            var companyCarType = "";
            if(comboCompanyCarType.SelectedItemOrNull is CompanyCarType carType) {
                companyCarType = carType.ToString();
            }
            
            var driverCarTypeId = "";
            if(!comboDriverCarType.IsSelectedAll && comboDriverCarType.SelectedItem is DriverCarKind driverCarKind) {
                driverCarTypeId = driverCarKind.Id.ToString();
            }

            return new ReportInfo {
                Identifier = "Logistic.CarsExploitationReport",
                Parameters = new Dictionary<string, object> {
                    { "start_date", new DateTime(selectedMonth, selectedMonth, 1) }, 
                    { 
                        "end_date",
                        new DateTime(selectedYear, selectedMonth, DateTime.DaysInMonth(selectedYear, selectedMonth),
                            23, 59, 59)
                    },
                    { "indicators_type", ((IndicatorsType)comboIndicatorsType.SelectedItem).ToString() },
                    { "car_own_type", carOwnType },
                    { "company_car_type", companyCarType },
                    { "driver_car_kind_id", driverCarTypeId },
                    { "car_id", entryCar.Subject == null ? (object)null : entryCar.SubjectId },
                    { "indicators", enumchecklistIndicators.SelectedValues }
                }
            };
        }

        private CompanyCarType GetCompanyCarType(Car car)
        {
            switch(car.TypeOfUse) {
                case CarTypeOfUse.CompanyLargus when !car.IsRaskat:
                    return CompanyCarType.Largus;
                case CarTypeOfUse.CompanyLargus when car.IsRaskat:
                    return CompanyCarType.LargusRaskat;
                case CarTypeOfUse.CompanyGAZelle when !car.IsRaskat:
                    return CompanyCarType.Gazelle;
                case CarTypeOfUse.CompanyGAZelle when car.IsRaskat:
                    return CompanyCarType.GazelleRaskat;
                default:
                    throw new InvalidOperationException();
            }
        }
        
        public enum IndicatorsType
        {
            [Display(Name = "планируемым")]
            Plan,
            [Display(Name = "фактическим")]
            Fact
        }
        
        public enum CarOwnType
        {
            [Display(Name = "Автопарк компании")]
            Company,
            [Display(Name = "Наёмный транспорт")]
            Driver
        }
        
        public enum CompanyCarType
        {
            [Display(Name = "Ларгус")]
            Largus,
            [Display(Name = "Ларгус раскат")]
            LargusRaskat,
            [Display(Name = "Газель")]
            Gazelle,
            [Display(Name = "Газлель раскат")]
            GazelleRaskat
        }

        public enum Indicator {
            [Display(Name = "Ходки")]
            Trips,
            [Display(Name = "Город/Пригород")]
            WageDistricts,
            [Display(Name = "Км предп")]
            MileagePlan,
            [Display(Name = "Км подтв")]
            MileageFact,
            [Display(Name = "Недовозы")]
            FuelOverspending,
            [Display(Name = "Опоздания")]
            Undeliveries,
            [Display(Name = "График")]
            LateArrivals,
            [Display(Name = "Районы")]
            WorkSchedules,
            [Display(Name = "Адреса")]
            Districts,
            [Display(Name = "Экспедиторы")]
            Forwarders,
            [Display(Name = "Загрузка")]
            LoadingAverage,
            [Display(Name = "19л")]
            Loading19Litres,
            [Display(Name = "кг")]
            LoadingKilograms,
            [Display(Name = "м3")]
            LoadingCubicMeters
        }
    }
}
